#!/usr/bin/env python3
import os
import sys
import subprocess
from pathlib import Path

# Define a threshold for "small" files (e.g., in bytes).
# 2KB = 2048 bytes. Files smaller than this will be printed to console.
SMALL_FILE_THRESHOLD_BYTES = 2048

def copy_to_clipboard(text_content):
    """Copies the given text content to the system clipboard using clip.exe."""
    try:
        process = subprocess.Popen(
            ["clip.exe"],
            stdin=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        stdout, stderr = process.communicate(input=text_content)
        if process.returncode == 0:
            return True
        else:
            print(f"Error: clip.exe failed with code {process.returncode}. Stderr: {stderr}")
            return False
    except FileNotFoundError:
        print("Error: clip.exe not found. Make sure it's accessible in your WSL PATH.")
        return False
    except Exception as e:
        print(f"An error occurred while copying to clipboard: {e}")
        return False

def process_file(file_path: Path):
    """Processes a single file: displays if small, prompts, and copies to clipboard."""
    print(f"\n--- Processing File: {file_path.name} (Full path: {file_path.resolve()}) ---")

    try:
        content_for_clipboard = file_path.read_text(encoding='utf-8', errors='replace')
        file_size_bytes = file_path.stat().st_size
        is_small = file_size_bytes < SMALL_FILE_THRESHOLD_BYTES

        if is_small:
            print("Content (small file):")
            print("--------------------------------------------------")
            print(content_for_clipboard.strip()) # Use the same content for preview
            print("--------------------------------------------------")
        else:
            print(f"Content is large ({file_size_bytes} bytes). Preview not shown.")

        while True:
            try:
                # Updated prompt: Default to Yes, added (q)uit option
                user_input = input(f"Copy '{file_path.name}' to clipboard? (Y/n/q to quit script): ").strip().lower()
                if user_input in ['y', 'yes', '']: # Default to Yes if Enter is pressed
                    if copy_to_clipboard(content_for_clipboard):
                        print(f"'{file_path.name}' content COPIED to clipboard. You can now paste it.")
                    else:
                        print(f"Failed to copy '{file_path.name}' to clipboard.")
                    break 
                elif user_input in ['n', 'no']:
                    print(f"Skipped copying '{file_path.name}'.")
                    break
                elif user_input in ['q', 'quit']:
                    print("Quitting script as requested by user.")
                    sys.exit(0) # Exit the entire script gracefully
                else:
                    print("Invalid input. Please enter 'y', 'n', or 'q'.")
            except EOFError:
                print(f"\nSkipped '{file_path.name}' due to EOF.")
                break 
            except KeyboardInterrupt: # Handle Ctrl+C at the prompt
                print(f"\nScript interrupted by user (Ctrl+C). Exiting.")
                sys.exit(130) # Standard exit code for Ctrl+C

    except Exception as e:
        print(f"Error processing file {file_path}: {e}")

def process_path_argument(path_arg_str: str):
    """
    Determines if path_arg is a file or directory and processes accordingly.
    For directories, it processes files directly within it (non-recursively).
    """
    path_arg = Path(path_arg_str)
    if path_arg.is_file():
        process_file(path_arg)
    elif path_arg.is_dir():
        print(f"\n=== Processing Directory: {path_arg.resolve()} ===")
        found_files = False
        for item in sorted(path_arg.iterdir()):
            if item.is_file() and not item.name.startswith('.'):
                process_file(item) # process_file will handle its own KeyboardInterrupt for quitting
                found_files = True
        if not found_files:
            print(f"No processable files found directly in directory: {path_arg.name}")
        print(f"=== Finished Processing Directory: {path_arg.resolve()} ===")
    else:
        print(f"Skipping: Argument '{path_arg_str}' is not a valid file or directory, or does not exist.")

def main():
    if len(sys.argv) < 2:
        print("Usage: catclip <file_or_dir1> [file_or_dir2 ...]") # Updated usage to reflect 'catclip'
        print("\nExamples:")
        print("  catclip README.md mobile/app/build.gradle")
        print("  catclip mobile/app")
        print("  catclip fek_wip/*.sh")
        return

    paths_to_process = sys.argv[1:]
    print(f"Script 'catclip' started. Paths to process: {paths_to_process}")

    try:
        for path_str_arg in paths_to_process:
            process_path_argument(path_str_arg)
            if len(paths_to_process) > 1 and paths_to_process.index(path_str_arg) < len(paths_to_process) -1 : # Check if not the last argument
                print("\n##################################################\n")
    except SystemExit as e: # Catch sys.exit() calls
        if e.code != 0: # If it's an error exit code (like from Ctrl+C)
            print(f"Script exited with code {e.code}.")
        # If code is 0 (like from 'q' option), it will exit silently after its message.
        raise # Re-raise to ensure script actually exits
    except KeyboardInterrupt: # Catch Ctrl+C in the main loop
        print(f"\nScript interrupted by user (Ctrl+C) in main loop. Exiting.")
        sys.exit(130)


    print("\nScript 'catclip' finished.")

if __name__ == "__main__":
    main()
