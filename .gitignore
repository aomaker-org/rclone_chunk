# .gitignore

# Python
# ------
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# Usually these files are written by a pyinstaller orchestrator script
# in a specific directory, which is then added to .gitignore.
# *.manifest
# *.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot
*.po

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or application, you might want to commit the .python-version file.
#   For a library, delete the following line.
#   For an application, you probably want to keep it.
# .python-version

# pipenv
#   According to Snyk / Best Practices Pipenv Lockfiles should be committed to Git SCM.
#   This causes issues in some CI/CD pipelines however amongst other concerns.
#   If your project uses pipenv, consider removing this line and committing Pipfile.lock.
# Pipfile.lock

# poetry
#   Poetry pyproject.toml / poetry.lock / pkgs / -- Should be committed to Git SCM.
# poetry.lock

# pdm
#   pdm.lock should be committed to Git SCM.
# pdm.lock
# .pdm-python

# PEP 582; __pypackages__
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv/
venv/
ENV/
env/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rove Contexts (for backtrader)
**/__pycache__/
*.pyc
*.pyo
*.pyd

# mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static PropertyName analyzer
.pytype/

# Cython debug symbols
cython_debug/

# VS Code
# --------
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# PyCharm
# --------
.idea/
*.iml
# Misc
# ----
# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project-specific temporary files or outputs
# ---------------------------------------------
# Logs generated by chunk_rclone.py (if stored in the project root)
# Adjust if your log_dir from config.toml points elsewhere or you want to commit example logs
rclone_chunk_logs_py/
*.log
# If you create specific output files from tests that you don't want to commit
# e.g., my_output_data.csv

# Configuration files that might contain secrets or local overrides
# (Keep config.toml.example in repo, but ignore actual config.toml if it has secrets)
# config.toml  <--- Be careful with this. If it contains no secrets, you can commit it.
#                  If it *does* contain secrets (like API keys for rclone remote, though rclone usually stores those in its own conf),
#                  then you should ignore it and provide a config.toml.example.
#                  Your current config.toml for rclone paths is likely safe to commit.
# control.toml <--- You might want to commit example control files, but ignore specific run files if they are numerous or temporary.
# control_*.toml # Example: ignore all files starting with control_

# Specific to your project structure
outdated_packages.txt # This is a temporary file generated by one of your scripts

# Add any other files or directories specific to your project that are generated
# or should not be version controlled.
